void() button_wait;
void() button_return;
void() button_wait = 
{
	self.state = TF_FLARE_LIT;
	self.nextthink = self.ltime + self.wait;
	self.think = button_return;
	activator = self.enemy;
	SUB_UseTargets();
	self.frame = TF_FLARE_OFF;
};
void() button_done = 
{
	self.state = TF_FLARE_OFF;
};
void() button_return = 
{
	self.goal_state = 2;
	self.state = 3;
	SUB_CalcMove(self.pos1, self.speed, button_done);
	self.frame = TF_FLARE_LIT;
	if (self.health)
	{
		self.takedamage = TF_FLARE_OFF;
	}
};
void() button_blocked = 
{
};
void() button_fire = 
{
	if (self.state == 2 || self.state == TF_FLARE_LIT)
	{
		return;
	}
	sound(self, 2, self.noise, TF_FLARE_OFF, TF_FLARE_OFF);
	self.state = 2;
	SUB_CalcMove(self.pos2, self.speed, button_wait);
};
void() button_use = 
{
	self.enemy = activator;
	button_fire();
};
void() button_touch = 
{
	local entity te;
	if (other.classname != "player")
	{
		return;
	}
	if (self.goal_activation & 8)
	{
		return;
	}
	if (!Activated(self, other))
	{
		if (self.else_goal != TF_FLARE_LIT)
		{
			te = Findgoal(self.else_goal);
			if (te)
			{
				DoResults(te, other, self.goal_result & 2);
			}
		}
		return;
	}
	self.enemy = other;
	button_fire();
};
void() button_killed = 
{
	if (self.goal_activation & 8)
	{
		return;
	}
	self.enemy = damage_attacker;
	self.health = self.max_health;
	self.takedamage = TF_FLARE_LIT;
	button_fire();
};
void () movewith_think =
{
	local vector moveme;
	if (((self.enemy.absmin+self.enemy.absmax)*0.5) != self.enemy.orig_origin)
	{
		moveme = ((self.enemy.absmin+self.enemy.absmax)*0.5) - self.enemy.orig_origin;
		setorigin(self.owner, (self.owner.orig_origin + moveme));
	}
	self.nextthink = time;
};
void () movewith_firstthink =
{
	local entity fent;
	self.owner.orig_origin = self.owner.origin;
	fent = find(world, targetname, self.owner.movewith);
	while (fent)
	{
		self.enemy = fent;
		fent.orig_origin = ((fent.mins+fent.maxs)*0.5);
		fent = find(fent, targetname, self.owner.movewith);
	}
	self.think = movewith_think;
	self.nextthink = time;
};
void (entity t_owner) SpawnMovewith =
{
	local entity newtent;
	newtent = spawn();
	newtent.owner = t_owner;
	newtent.think = movewith_firstthink;
	newtent.nextthink = time + 0.1;
};
void() func_button = 
{
	if (CheckExistence() == TF_FLARE_LIT)
	{
		dremove(self);
		return;
	}
	if (self.sounds == TF_FLARE_LIT)
	{
		precache_sound("buttons/airbut1.wav"); // used with needler.qc -arg
		self.noise = "buttons/airbut1.wav";
	}
	if (self.sounds == TF_FLARE_OFF)
	{
		precache_sound2 ("buttons/switch21.wav");
		self.noise = "buttons/switch21.wav";
	}
	if (self.sounds == 2)
	{
		precache_sound("buttons/switch02.wav");
		self.noise = "buttons/switch02.wav";
	}
	if (self.sounds == 3)
	{
		precache_sound("buttons/switch04.wav");
		self.noise = "buttons/switch04.wav";
	}
	if (self.sounds == 4)
	{
		precache_sound2 ("effects/rockfall.wav");
		self.noise = "effects/rockfall.wav";
	}
	SetMovedir();
	self.movetype = 7;
	self.solid = 4;
	setmodel(self, self.model);
	self.blocked = button_blocked;
	self.use = button_use;
	if (self.health)
	{
		self.max_health = self.health;
		self.th_die = button_killed;
		self.takedamage = TF_FLARE_OFF;
	}
	else
	{
		self.touch = button_touch;
	}
	if (!(self.speed))
	{
		self.speed = 40;
	}
	if (!(self.wait))
	{
		self.wait = TF_FLARE_OFF;
	}
	if (!(self.lip))
	{
		self.lip = 4;
	}
	self.state = TF_FLARE_OFF;
	self.pos1 = self.origin;
	self.pos2 = self.pos1 + self.movedir * (fabs(self.movedir * self.size) - self.lip);
	if (self.spawnflags & 32)
	{
		button_fire();
	}
	if (self.movewith != string_null)
	{
		SpawnMovewith(self);
	}
};
//END
