void() messagetimer =
{
	if (infokey (world, "message1"))
	{
		newmis = spawn();
		newmis.classname = "timer";
		newmis.nextthink = time + msg1time;
		newmis.think = display_message;
	}
};
void() display_message =
{
	if (msg1first == 0)
	{
		msg1first = 1;
		newmis = spawn();
		newmis.classname = "timer";
		newmis.nextthink = time + 5;
		newmis.think = display_message;
		return;
	}
	local string t_message;
	local string mesg2;
	t_message = (infokey (world, "message1"));
	if (num_players > 0)
	{
		if (infokey (world, "message1_2") != "")
		{
			localcmd ("say ");
			localcmd (t_message);
			localcmd (" ");
			mesg2 = (infokey (world, "message1_2"));
			localcmd (mesg2);
			localcmd ("\n");
		}
		else
		{
			localcmd ("say ");
			localcmd (t_message);
			localcmd ("\n");
		}
	}
	messagetimer ();
	dremove (self);
};
void() messagetimer2 =
{
	if (infokey (world, "message2"))
	{
		newmis = spawn();
		newmis.classname = "timer";
		newmis.nextthink = time + msg2time;
		newmis.think = display_message2;
	}
};
void() display_message2 =
{
	if (msg2first == 0)
	{
		msg2first = 1;
		newmis = spawn();
		newmis.classname = "timer";
		newmis.nextthink = time + 5;
		newmis.think = display_message2;
		return;
	}
	local string mesg2;
	local string mesg22;
	mesg2 = (infokey (world, "message2"));
	if (num_players > 0)
	{
		if (infokey (world, "message2_2") != "")
		{
			localcmd ("say ");
			localcmd (mesg2);
			localcmd (" ");
			mesg22 = (infokey (world, "message2_2"));
			localcmd (mesg22);
			localcmd ("\n");
		}
		else
	{
			localcmd ("say ");
			localcmd (mesg2);
			localcmd ("\n");
		}
	}
	messagetimer2 ();
	dremove (self);
};
void() pre_messagetimer2 =
{
	local string msgd;
	msgd = infokey (world, "svmsg_delay");
	msgdelay = stof(msgd);
	if (msgdelay > 0)
	{
		newmis = spawn();
		newmis.classname = "timer";
		newmis.nextthink = time + msgdelay;
		newmis.think = display_message2;
		return;
	}
	else
	{
		messagetimer2 ();
	}
};
void() display_message3 =
{
	if (msg3first == 0)
	{
		msg3first = 1;
		newmis = spawn();
		newmis.classname = "timer";
		newmis.nextthink = time + 5;
		newmis.think = display_message3;
		return;
	}
	local string message3;
	local string mesg32;
	message3 = (infokey (world, "message3"));
	if (num_players > 0)
	{
		if (infokey (world, "message3_2") != "")
		{
			localcmd ("say ");
			localcmd (message3);
			localcmd (" ");
			mesg32 = (infokey (world, "message3_2"));
			localcmd (mesg32);
			localcmd ("\n");
		}
		else
	{
			localcmd ("say ");
			localcmd (message3);
			localcmd ("\n");
		}
	}
	messagetimer3 ();
	dremove (self);
};
void() pre_messagetimer3 =
{
	local string msgd2;
	msgd2 = infokey (world, "svmsg_delay2");
	msgdelay2 = stof(msgd2);
	if (msgdelay2 > 0)
	{
		newmis = spawn();
		newmis.classname = "timer";
		newmis.nextthink = time + msgdelay2;
		newmis.think = display_message3;
		return;
	}
	else
	{
		messagetimer3 ();
	}
};
void() messagetimer3 =
{
	if (infokey (world, "message3"))
	{
		newmis = spawn();
		newmis.classname = "timer";
		newmis.nextthink = time + msg3time;
		newmis.think = display_message3;
	}
};
void() pm_list =
{
	local entity entar;
	local string str;
	entar = find(world, classname, "player");
	while(entar)
	{
	if (entar.userid != 0)
	{
		str = ftos(entar.userid);
		sprint (self, 2, str);
		sprint (self, 2, "     ");
		sprint (self, 2, entar.netname);
		sprint (self, 2, " .\n");
	}
		entar = find(entar, classname, "player");
	}
};
void() quotetimer =
{
	if (infokey (world, "moviequotes"))
	{
		local string qtime;
		local float qtimer;
		qtime = infokey (world, "moviequotes");
		qtimer = stof(qtime);
		if (qtimer <  1)
		{
			return;
		}
		newmis = spawn();
		newmis.classname = "timer";
		newmis.nextthink = time + qtimer;
		newmis.think = display_quote;
	}
};
void() display_quote =
{
	if (num_players > 0)
	{
		local string result;
		local float test;
		test = floor(random() * 26) + 1;
		result = quotetostring (test);
		localcmd ("say ** ");
		localcmd (result);
		localcmd (" **\n");
	}
	quotetimer ();
	dremove (self);
};
void () EntityCount =
{
	local float counter;
	local entity current;
	local string output;
	counter = 0;
	current = world;
	current = nextent(current);
	while (current != world)
	{
		counter = counter + 1;
		current = nextent(current);
	}
	output = ftos(counter);
	dprint ("\nTotal entities currently: ");
	dprint (output);
}; 
void (entity e, float flt) Rank_FragIncrease;
void() tester =
{
bprint(2, vtos(self.angles));
bprint(2, " - angle\n");
bprint(2, vtos(self.origin));
bprint(2, " - origin\n");
};
string(float whee) quotetostring =
{
	local float val;
	val = whee;
	if (val == 1)
	{
		return "I have come here to chew bubblegum and kick ass, and I'm all out of bubblegum";
	}
	if (val == 2)
	{
		return "Now, if my calculations are correct, when this baby hits eighty-eight miles per hour, you're gonna see some serious shit";
	}
	if (val == 3)
	{
		return "\"She's supposed to have transwarp.\" -- Sulu, \"Aye. And if my grandmother had wheels, she'd be a wagon.\" -- Scotty";
	}
	if (val == 4)
	{
		return "\"Stand back?!\" -- Kirk/Spock/Mccoy, (Boom!), \"What are ya standin' there for. Da ya not know a jailbreak when ya see one.\" -- Scotty";
	}
	if (val == 5)
	{
		return "All right you primitive screwheads, listen up! You see this? This is my BOOMSTICK!";
	}
	if (val == 6)
	{
		return "Don't be too proud of this technological terror you've constructed. The ability to destroy a planet is insignificant next to the power of the Force";
	}
	if (val == 7)
	{
		return "Hokey religions and ancient weapons are no match for a good blaster at your side, kid";
	}
	if (val == 8)
	{
		return "That's no moon. It's a space station.";
	}
	if (val == 9)
	{
		return "Size matters not. Look at me. Judge me by my size, do you? Hm? And well you should not. For my ally is the Force. And a powerful ally it is..";
	}
	if (val == 10)
	{
		return "You're gonna need a bigger boat.";
	}
	if (val == 11)
	{
		return "Kids, you tried your best and you failed miserably. The lesson is, never try";
	}
	if (val == 12)
	{
		return "Relax. What is mind? No matter. What is matter? Never mind!";
	}
	if (val == 13)
	{
		return "Simpson-Homer Simpson, he's the greatest guy in his-tor-y. From the town of Springfield, he's about to hit a chestnut tree....D'oh!";
	}
	if (val == 14)
	{
		return "Now, son, you don't want to drink beer. That's for daddies and kids with fake IDs";
	}
	if (val == 15)
	{
		return "There's no reason to become alarmed, and we hope you'll enjoy the rest of your flight. By the way, is there anyone on board who knows how to fly a plane?";
	}
	if (val == 16)
	{
		return "The survival of everyone on board depends on just one thing: finding someone on board who can not only fly this plane, but who didn't have fish for dinner";
	}
	if (val == 17)
	{
		return "Why, ye could go on a REGAL rampage!";
	}
	if (val == 18)
	{
		return "Hey, Stickly Man, whaaaaat are you doing?";
	}
	if (val == 19)
	{
		return "You hear me talkin', hillbilly boy? I ain't through with you by a damn sight. I'ma get medieval on your ass";
	}
	if (val == 20)
	{
		return "Whether or not what we experienced was an According to Hoyle miracle is insignificant. What is significant is that I felt the touch of God. God got involved";
	}
	if (val == 21)
	{
		return "Damn you, vile woman, you've impeded my work since the day I escaped your wretched womb.";
	}
	if (val == 22)
	{
		return "And Saint Attila raised the hand grenade up on high, saying,'O Lord, bless this thy hand grenade that with it thou mayest blow thine enemies to tiny bits, in thy mercy.' And the Lord did grin, and the people did feast upon the lambs and sloths and carp and anchovies and orangutans and breakfast cereals and fruit bats and large chu--";
	}
	if (val == 23)
	{
		return "And the Lord spake, saying, 'First shalt thou take out the Holy Pin. Then shalt thou count to three, no more, no less. Three shall be the number thou shalt count, and the number of the counting shall be three. Four shalt thou not count, neither count thou two, excepting that thou then proceed to three. Five is right out. Once the number three, being the third number, be reached, then lobbest thou thy Holy Hand Grenade of Antioch towards thy foe, who, being naughty in my sight, shall snuff it.";
	}
	if (val == 24)
	{
		return "King Arthur: Who are you who can summon fire without flint or tinder? sorcerer: There are some who call me... Tim. ";
	}
	if (val == 25)
	{
		return "*Rabbit flies at Bors’s throat and savages him to death* TIM: I warned you, but did you listen to me? Oh, no, you knew it all, didn't you? Oh, it's just a harmless little bunny, isn't it? Well, it's always the same. I always tell them--";
	}
	if (val == 26)
	{
		return "King Arthur: Did you say shrubberies? Roger the Shrubber: Yes, shrubberies are my trade. I am a shrubber. My name is Roger the Shrubber. I arrange, design, and sell shrubberies.";
	}
	else
		return "invalid quote";
};
void (float _p_2420) Stats_Fired =
{
return;
//Basically all the time uber is in mtf_coop mode as all their code is added. So this file might as well be scrapped.
//Keep for comparison uses but it's basically not compiled -arg
//#ifndef mtf_coop
//	if ((self.stats_on == 1.000000))
//	{
//		stuffcmd (self, "inc ");
//		if ((_p_2420 == 8.000000))
//		{
//			stuffcmd (self, "stats_axe_f");
//		}
//		else
//		{
//			if ((_p_2420 == 16.000000))
//			{
//				stuffcmd (self, "stats_axe_f");
//			}
//			else
//			{
//				if ((_p_2420 == 1.000000))
//				{
//					stuffcmd (self, "stats_grap_f");
//				}
//				else
//				{
//					if ((_p_2420 == 128.000000))
//					{
//						stuffcmd (self, "stats_sg_f");
//					}
//					else
//					{
//						if ((_p_2420 == 256.000000))
//						{
//							stuffcmd (self, "stats_ssg_f");
//						}
//						else
//						{
//							if ((_p_2420 == 512.000000))
//							{
//								stuffcmd (self, "stats_ng_f");
//							}
//							else
//							{
//								if ((_p_2420 == 1024.000000))
//								{
//									stuffcmd (self, "stats_sng_f");
//								}
//								else
//								{
//									if (((_p_2420 == 2048.000000) && (self.weaponmode == 1.000000)))
//									{
//										stuffcmd (self, "stats_pb_f");
//									}
//									else
//									{
//										if ((_p_2420 == 2048.000000))
//										{
//											stuffcmd (self, "stats_gl_f");
//										}
//										else
//										{
//											if ((_p_2420 == 8192.000000))
//											{
//												stuffcmd (self, "stats_rl_f");
//											}
//											else
//											{
//												if ((_p_2420 == 32.000000))
//												{
//													stuffcmd (self, "stats_sr_f");
//												}
//												else
//												{
//													if ((_p_2420 == 64.000000))
//													{
//														stuffcmd (self, "stats_mg_f");
//													}
//													else
//													{
//														if (((_p_2420 == 32768.000000) && (self.option4 == 1.000000)))
//														{
//															stuffcmd (self, "stats_20mm_f");
//														}
//														else
//														{
//															if ((_p_2420 == 32768.000000))
//															{
//																stuffcmd (self, "stats_ac_f");
//															}
//															else
//															{
//																if ((_p_2420 == 4096.000000))
//																{
//																	stuffcmd (self, "stats_ft_f");
//																}
//																else
//																{
//																	if ((_p_2420 == 16384.000000))
//																	{
//																		stuffcmd (self, "stats_incend_f");
//																	}
//																	else
//																	{
//																		if ((_p_2420 == 4.000000))
//																		{
//																			stuffcmd (self, "stats_ba_f");
//																		}
//																		else
//																		{
//																			if ((_p_2420 == 2.000000))
//																			{
//																				stuffcmd (self, "stats_ba_f");
//																			}
//																			else
//																			{
//																				if ((_p_2420 == 262144.000000))
//																				{
//																					stuffcmd (self, "stats_tranq_f");
//																				}
//																				else
//																				{
//																					if ((_p_2420 == 524288.000000))
//																					{
//																						stuffcmd (self, "stats_rg_f");
//																					}
//																					else
//																					{
//																						if ((_p_2420 == 666.000000))
//																						{
//																							stuffcmd (self, "stats_g1_f");
//																						}
//																					}
//																				}
//																			}
//																		}
//																	}
//																}
//															}
//														}
//													}
//												}
//											}
//										}
//									}
//								}
//							}
//						}
//					}
//				}
//			}
//		}
//		stuffcmd (self, " 1\n");
//	}
//#endif
};

void (float _p_2445) Stats_Hit =
{
#ifndef mtf_coop
	if ((self.stats_on == 1.000000))
	{
		stuffcmd (self, "inc ");
		if ((_p_2445 == 8.000000))
		{
			stuffcmd (self, "stats_axe_h");
		}
		else
		{
			if ((_p_2445 == 16.000000))
			{
				stuffcmd (self, "stats_axe_h");
			}
			else
			{
				if ((_p_2445 == 1.000000))
				{
					stuffcmd (self, "stats_grap_h");
				}
				else
				{
					if ((_p_2445 == 128.000000))
					{
						stuffcmd (self, "stats_sg_h");
					}
					else
					{
						if ((_p_2445 == 256.000000))
						{
							stuffcmd (self, "stats_ssg_h");
						}
						else
						{
							if ((_p_2445 == 512.000000))
							{
								stuffcmd (self, "stats_ng_h");
							}
							else
							{
								if ((_p_2445 == 1024.000000))
								{
									stuffcmd (self, "stats_sng_h");
								}
								else
								{
									if ((_p_2445 == 2054.000000))
									{
										stuffcmd (self, "stats_pb_h");
									}
									else
									{
										if ((_p_2445 == 2048.000000))
										{
											stuffcmd (self, "stats_gl_h");
										}
										else
										{
											if ((_p_2445 == 8192.000000))
											{
												stuffcmd (self, "stats_rl_h");
											}
											else
											{
												if ((_p_2445 == 34.000000))
												{
													stuffcmd (self, "stats_sr_h 1\n inc ");
													stuffcmd (self, "stats_sr_hs");
												}
												else
												{
													if ((_p_2445 == 33.000000))
													{
														stuffcmd (self, "stats_sr_h 1\n inc ");
														stuffcmd (self, "stats_sr_ls");
													}
													else
													{
														if ((_p_2445 == 32.000000))
														{
															stuffcmd (self, "stats_sr_h 1\n inc ");
															stuffcmd (self, "stats_sr_cs");
														}
														else
														{
															if ((_p_2445 == 64.000000))
															{
																stuffcmd (self, "stats_mg_h");
															}
															else
															{
																if (((_p_2445 == 32768.000000) && (self.option4 == 1.000000)))
																{
																	stuffcmd (self, "stats_20mm_h");
																}
																else
																{
																	if ((_p_2445 == 32768.000000))
																	{
																		stuffcmd (self, "stats_ac_h");
																	}
																	else
																	{
																		if ((_p_2445 == 4096.000000))
																		{
																			stuffcmd (self, "stats_ft_h");
																		}
																		else
																		{
																			if ((_p_2445 == 16384.000000))
																			{
																				stuffcmd (self, "stats_incend_h");
																			}
																			else
																			{
																				if ((_p_2445 == 4.000000))
																				{
																					stuffcmd (self, "stats_ba_h");
																				}
																				else
																				{
																					if ((_p_2445 == 2.000000))
																					{
																						stuffcmd (self, "stats_ba_h");
																					}
																					else
																					{
																						if ((_p_2445 == 262144.000000))
																						{
																							stuffcmd (self, "stats_tranq_h");
																						}
																						else
																						{
																							if ((_p_2445 == 524288.000000))
																							{
																								stuffcmd (self, "stats_rg_h");
																							}
																							else
																							{
																								if ((_p_2445 == 666.000000))
																								{
																									stuffcmd (self, "stats_g1_h");
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		stuffcmd (self, " 1\n");
	}
#endif
};
void() func_nobuild =
{
	self.solid = SOLID_TRIGGER;
	setsize(self, '0 0 0', '0 0 0');
	self.classname = "func_nobuild";
	self.touch = SUB_Null;
};
//end