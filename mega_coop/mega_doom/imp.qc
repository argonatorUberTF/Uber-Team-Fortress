/* Doom Imp *With some code borrowed from YPOD*/void () dimp_slash1;void () dimp_PreFireBall;void () dimp_Slash;void () dimp_check_frame ={	if (self.frame >= 0 && self.frame <= 17)			/* idle */	{			}	else if (self.frame >= 39 && self.frame <=  54)  	/* walk and run */	{	}	else if (self.frame >= 55 && self.frame <=  58)  	/* attacking */	{	}	else if (self.frame >= 17 && self.frame <=  32)  	/* death */	{	}	else if (self.frame >= 33 && self.frame <=  38)  	/* pain */	{	}	self.oframe = self.frame;	doom_ai_sprite_orient(56);	self.nextthink = time + 0.1;};void () dimp_stand1 = [ 0, dimp_stand2 ]{	dimp_check_frame();	ai_stand (); };void () dimp_stand2 = [ 8, dimp_stand3 ]{	dimp_check_frame();	ai_stand (); };void () dimp_stand3 = [ 16, dimp_stand4 ]{	dimp_check_frame();	ai_stand (); };void () dimp_stand4 = [ 24, dimp_stand5 ]{	dimp_check_frame();	ai_stand (); };void () dimp_stand5 = [ 16, dimp_stand6 ]{	dimp_check_frame();	ai_stand (); };void () dimp_stand6 = [ 8, dimp_stand1 ]{	dimp_check_frame();	ai_stand (); };void () dimp_walk1 = [ 0, dimp_walk2 ]{dimp_check_frame();	if ((random () < 0.4))	{		sound (self, CHAN_VOICE, "doom_imp/idle.wav", TRUE, ATTN_IDLE);	}	ai_walk (5 + TRUE); };void () dimp_walk2 = [ 8, dimp_walk3 ]{dimp_check_frame();	ai_walk (5 + TRUE); };void () dimp_walk3 = [ 16, dimp_walk4 ]{dimp_check_frame();	ai_walk (5 + TRUE); };void () dimp_walk4 = [ 24, dimp_walk5 ]{dimp_check_frame();	ai_walk (5 + TRUE); };void () dimp_walk5 = [ 16, dimp_walk6 ]{dimp_check_frame();	ai_walk (5 + FL_SWIM); };void () dimp_walk6 = [ 8, dimp_walk1 ]{dimp_check_frame();	ai_walk (5 + MOVETYPE_WALK); };void () dimp_run1 = [ 0, dimp_run2 ]{dimp_check_frame();	ai_run (10 + FL_SWIM); 	if ((random () < 0.2))	{		sound (self, CHAN_VOICE, "doom_imp/idle.wav", TRUE, ATTN_IDLE);	}};void () dimp_run2 = [ 8, dimp_run3 ]{dimp_check_frame();	ai_run (10 + MOVETYPE_FLY); 	 };void () dimp_run3 = [ 16, dimp_run4 ]{dimp_check_frame();	ai_run (10 + MOVETYPE_STEP); 	 };void () dimp_run4 = [ 24, dimp_run1 ]{dimp_check_frame();	ai_run (10 + MOVETYPE_WALK); 	 };void () dimp_run5 = [ 16, dimp_run6 ]{dimp_check_frame();	ai_run (10 + MOVETYPE_STEP); 	 };void () dimp_run6 = [ 8, dimp_run1 ]{dimp_check_frame();	ai_run (10 + MOVETYPE_STEP); 	};void () doomimpFire_Touch ={	local vector org;	if ((other == self.owner))	{		return;	}	if ((pointcontents (self.origin) == CONTENT_SKY))	{		remove (self);		return;	}	sound (self, CHAN_WEAPON, "doom_imp/hit.wav", TRUE, ATTN_STATIC);	org = (self.origin - (FL_CLIENT * normalize (self.velocity)));	if ((other.classname == "monster_doomimp"))	{		return;	}	if (other.health)	{		SpawnBlood (org, 15);		T_Damage (other, self, self.owner, 25);	}	remove (self);};void (vector org, vector vec) dimp_FireBall ={	if ((self.classname == "monster_doomimp"))	{		sound (self, CHAN_WEAPON, "doom_imp/fire.wav", TRUE, ATTN_NORM);	}	vec = normalize (vec);	newmis = spawn ();	newmis.owner = self;	newmis.movetype = MOVETYPE_FLY;	newmis.solid = SOLID_BBOX;	/*newmis.effects = EF_DIMLIGHT;*/	setmodel (newmis, "sprites/doom/impball.spr");	setsize (newmis, VEC_ORIGIN, VEC_ORIGIN);	setorigin (newmis, org);	newmis.velocity = (vec * 500);	newmis.angles = vectoangles (newmis.velocity);	newmis.nextthink = (time + 15);	newmis.think = SUB_Remove;	newmis.touch = doomimpFire_Touch;	self.attack_finished = (time + TRUE);};void () dimp_PreFireBall ={	local vector org;	makevectors (self.angles);	org = (((self.origin + (v_forward * SVC_INTERMISSION)) + (v_right * 8.5)) + '0 0 16');	dimp_FireBall (org, (self.enemy.origin - self.origin));};void () dimp_atk1 = [ 32, dimp_atk2 ]{dimp_check_frame();	ai_face (); };void () dimp_atk2 = [ 32, dimp_atk3 ]{dimp_check_frame();	ai_face (); };void () dimp_atk3 = [ 40, dimp_atk4 ]{dimp_check_frame();	ai_face (); };void () dimp_atk4 = [ 48, dimp_run1 ]{	dimp_check_frame();		ai_face ();	dimp_PreFireBall ();	/*self.effects = (self.effects | EF_MUZZLEFLASH);*/	self.nextthink = (time + 0.05);};void () dimp_Slash ={	local vector delta;	local float Idmg;	if ((self.attack_finished > time))	{		return;	}	ai_charge (MOVETYPE_BOUNCE);	if (!self.enemy)	{		return;	}	delta = (self.enemy.origin - self.origin);	sound (self, CHAN_WEAPON, "doom_imp/claw.wav", TRUE, ATTN_STATIC);	Idmg = ((random () * MOVETYPE_BOUNCE) + MOVETYPE_FLY + 10);	T_Damage (self.enemy, self, self, Idmg);	self.attack_finished = (time + 0.3);	SUB_CheckRefire (dimp_slash1);};void () dimp_slash1 = [ 32, dimp_slash2 ]{	dimp_check_frame();	ai_face (); };void () dimp_slash2 = [ 40, dimp_slash3 ]{	dimp_check_frame();	ai_face (); };void () dimp_slash3 = [ 48, dimp_slash4 ]{	dimp_Slash ();	dimp_check_frame();	ai_face (); };void () dimp_slash4 = [ 40, dimp_run1 ]{	ai_face (); 	/*self.effects = (self.effects | EF_MUZZLEFLASH); */	};void () dimp_pain1 = [ 56, dimp_pain2 ]{	dimp_check_frame();};void () dimp_pain2 = [ 56, dimp_run1 ]{	dimp_check_frame();};void () dimp_run ={	if ((random () < 0.2))	{		sound (self, CHAN_VOICE, "doom_imp/idle.wav", TRUE, ATTN_IDLE);	}	dimp_run1 (); };void (entity attacker, float damage) dimp_pain ={	if ((self.pain_finished > time))	{		return;	}	self.pain_finished = (time + 1.5);	dimp_pain1 ();	sound (self, CHAN_VOICE, "doom_imp/imppain.wav", TRUE, ATTN_NORM);};void () dimp_die1 = [ 57, dimp_die2 ]{dimp_check_frame();	self.solid = SOLID_NOT;	self.ammo_nails = MOVETYPE_FLY;	DropClip (); };void () dimp_die2 = [ 58, dimp_die3 ]{dimp_check_frame();};void () dimp_die3 = [ 59, dimp_die4 ]{dimp_check_frame();};void () dimp_die4 = [ 60, dimp_die5 ]{dimp_check_frame();};void () dimp_die5 = [ 61, dimp_die5 ]{dimp_check_frame();};void () dimp_gib1 = [ 62, dimp_gib2 ]{dimp_check_frame();	self.solid = SOLID_NOT;	self.ammo_nails = MOVETYPE_FLY;	DropClip (); };void () dimp_gib2 = [ 63, dimp_gib3 ]{dimp_check_frame();};void () dimp_gib3 = [ 64, dimp_gib4 ]{dimp_check_frame();};void () dimp_gib4 = [ 65, dimp_gib5 ]{dimp_check_frame();};void () dimp_gib5 = [ 66, dimp_gib6 ]{dimp_check_frame();};void () dimp_gib6 = [ 67, dimp_gib7 ]{dimp_check_frame();};void () dimp_gib7 = [ 68, dimp_gib8 ]{dimp_check_frame();};void () dimp_gib8 = [ 69, dimp_gib8 ]{dimp_check_frame();};void () dimp_die ={	if ((self.health < -65))	{		sound (self, CHAN_VOICE, "action/gibs.wav", TRUE, ATTN_NORM);		dimp_gib1();		return;	}	sound (self, CHAN_VOICE, "doom_imp/die.wav", TRUE, ATTN_NORM);	dimp_die1 ();};void () monster_dimp1 ={	self.solid = SOLID_SLIDEBOX;	self.movetype = MOVETYPE_STEP;	setmodel (self, "sprites/doom/imp.spr");	setsize (self, VEC_HULL_MIN, '16 16 40');	self.classname = "monster_doomimp";	self.health = 60;	self.th_stand = dimp_stand1;	self.th_walk = dimp_walk1;	self.th_run = dimp_run;	self.th_missile = dimp_atk1;	self.th_pain = dimp_pain;	self.th_die = dimp_die;	self.th_melee = dimp_slash1;		MTF_Setup_Monster_Postsets( self.health, coop_walkmonster_start);};void () monster_dimp ={	if (deathmatch)	{		remove (self);		return;	}	precache_model ("sprites/doom/impball.spr");	precache_model ("sprites/doom/imp.spr");	precache_sound ("doom_imp/die.wav");	precache_sound ("doom_imp/idle.wav");	precache_sound ("doom_imp/imppain.wav");	/*	precache_sound ("doom_soldier/pain2.wav");	precache_sound ("doom_soldier/sattck1.wav");	precache_sound ("doom_soldier/sight1.wav");	*/	precache_sound ("doom_imp/hit.wav");	precache_sound ("doom_imp/fire.wav");	precache_sound ("doom_imp/claw.wav");	precache_sound ("action/gibs.wav");		MTF_Setup_Monster_Presets ( 0, "Imp", monster_dimp1 );};//END