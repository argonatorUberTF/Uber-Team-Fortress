void () main =
{
	dprint ("main function\n");
	precache_file ("main function\n");
	precache_file ("progs.dat");
	precache_file ("gfx.wad");
	precache_file ("quake.rc");
	precache_file ("default.cfg");
	precache_file ("end1.bin");
	precache_file2 ("end2.bin");
	precache_file ("demo1.dem");
	precache_file ("demo2.dem");
	precache_file ("demo3.dem");
	precache_file ("gfx/palette.lmp");
	precache_file ("gfx/colormap.lmp");
	precache_file2 ("gfx/pop.lmp");
	precache_file ("gfx/complete.lmp");
	precache_file ("gfx/inter.lmp");
	precache_file ("gfx/ranking.lmp");
	precache_file ("gfx/vidmodes.lmp");
	precache_file ("gfx/finale.lmp");
	precache_file ("gfx/conback.lmp");
	precache_file ("gfx/qplaque.lmp");
	precache_file ("gfx/menudot1.lmp");
	precache_file ("gfx/menudot2.lmp");
	precache_file ("gfx/menudot3.lmp");
	precache_file ("gfx/menudot4.lmp");
	precache_file ("gfx/menudot5.lmp");
	precache_file ("gfx/menudot6.lmp");
	precache_file ("gfx/menuplyr.lmp");
	precache_file ("gfx/bigbox.lmp");
	precache_file ("gfx/dim_modm.lmp");
	precache_file ("gfx/dim_drct.lmp");
	precache_file ("gfx/dim_ipx.lmp");
	precache_file ("gfx/dim_tcp.lmp");
	precache_file ("gfx/dim_mult.lmp");
	precache_file ("gfx/mainmenu.lmp");
	precache_file ("gfx/box_tl.lmp");
	precache_file ("gfx/box_tm.lmp");
	precache_file ("gfx/box_tr.lmp");
	precache_file ("gfx/box_ml.lmp");
	precache_file ("gfx/box_mm.lmp");
	precache_file ("gfx/box_mm2.lmp");
	precache_file ("gfx/box_mr.lmp");
	precache_file ("gfx/box_bl.lmp");
	precache_file ("gfx/box_bm.lmp");
	precache_file ("gfx/box_br.lmp");
	precache_file ("gfx/sp_menu.lmp");
	precache_file ("gfx/ttl_sgl.lmp");
	precache_file ("gfx/ttl_main.lmp");
	precache_file ("gfx/ttl_cstm.lmp");
	precache_file ("gfx/mp_menu.lmp");
	precache_file ("gfx/netmen1.lmp");
	precache_file ("gfx/netmen2.lmp");
	precache_file ("gfx/netmen3.lmp");
	precache_file ("gfx/netmen4.lmp");
	precache_file ("gfx/netmen5.lmp");
	precache_file ("gfx/sell.lmp");
	precache_file ("gfx/help0.lmp");
	precache_file ("gfx/help1.lmp");
	precache_file ("gfx/help2.lmp");
	precache_file ("gfx/help3.lmp");
	precache_file ("gfx/help4.lmp");
	precache_file ("gfx/help5.lmp");
	precache_file ("gfx/pause.lmp");
	precache_file ("gfx/loading.lmp");
	precache_file ("gfx/p_option.lmp");
	precache_file ("gfx/p_load.lmp");
	precache_file ("gfx/p_save.lmp");
	precache_file ("gfx/p_multi.lmp");
//	precache_sound ("misc/menu1.wav");  //Removed to free up sound precache -arg
//	precache_sound ("misc/menu2.wav");
//	precache_sound ("misc/menu3.wav");
	precache_sound ("ambience/water1.wav");
	precache_sound ("ambience/wind2.wav");
	precache_file ("maps/start.bsp");
	precache_file ("maps/e1m1.bsp");
	precache_file ("maps/e1m2.bsp");
	precache_file ("maps/e1m3.bsp");
	precache_file ("maps/e1m4.bsp");
	precache_file ("maps/e1m5.bsp");
	precache_file ("maps/e1m6.bsp");
	precache_file ("maps/e1m7.bsp");
	precache_file ("maps/e1m8.bsp");
	precache_file2 ("gfx/pop.lmp");
	precache_file2 ("maps/e2m1.bsp");
	precache_file2 ("maps/e2m2.bsp");
	precache_file2 ("maps/e2m3.bsp");
	precache_file2 ("maps/e2m4.bsp");
	precache_file2 ("maps/e2m5.bsp");
	precache_file2 ("maps/e2m6.bsp");
	precache_file2 ("maps/e2m7.bsp");
	precache_file2 ("maps/e3m1.bsp");
	precache_file2 ("maps/e3m2.bsp");
	precache_file2 ("maps/e3m3.bsp");
	precache_file2 ("maps/e3m4.bsp");
	precache_file2 ("maps/e3m5.bsp");
	precache_file2 ("maps/e3m6.bsp");
	precache_file2 ("maps/e3m7.bsp");
	precache_file2 ("maps/e4m1.bsp");
	precache_file2 ("maps/e4m2.bsp");
	precache_file2 ("maps/e4m3.bsp");
	precache_file2 ("maps/e4m4.bsp");
	precache_file2 ("maps/e4m5.bsp");
	precache_file2 ("maps/e4m6.bsp");
	precache_file2 ("maps/e4m7.bsp");
	precache_file2 ("maps/e4m8.bsp");
	precache_file2 ("maps/end.bsp");
	precache_file2 ("maps/dm1.bsp");
	precache_file2 ("maps/dm2.bsp");
	precache_file2 ("maps/dm3.bsp");
	precache_file2 ("maps/dm4.bsp");
	precache_file2 ("maps/dm5.bsp");
	precache_file2 ("maps/dm6.bsp");
};
void () uptime_think; // btf'd
float server_time; // btf'd
void() Monster_Stats_Create;
void () worldspawn =
{
	local entity uptime; // btf'd
	local float vw_available;
#ifdef botprogs
	BotInit ();
#endif
#ifdef mtf_coop_packet
	#SETVERSION
#endif
	uptime = spawn ();
	uptime.owner = world;
	uptime.classname = "uptime";
	uptime.think = uptime_think;
	uptime.impulse = 1;
	uptime.nextthink = time;
	server_time = stof (infokey (world, "sv_time"));
	lastspawn = world;
	InitBodyQue ();
	if ((infokey (world, "*gamedir") != "fortress"))
	{
		objerror ("QW TF must be run with a gamedir of \"fortress\".\n");
	}
	W_Precache ();
	precache_sound ("demon/dland2.wav");
	precache_sound ("misc/h2ohit1.wav");
	precache_sound ("items/itembk2.wav");
	precache_sound ("player/plyrjmp8.wav");
	precache_sound ("player/land.wav");
	precache_sound ("player/land2.wav");
	precache_sound ("player/drown1.wav");
	precache_sound ("player/drown2.wav");
	precache_sound ("player/gasp1.wav");
	precache_sound ("player/gasp2.wav");
	precache_sound ("player/h2odeath.wav");
	precache_sound ("misc/talk.wav");
	precache_sound ("player/teledth1.wav");
	precache_sound ("misc/r_tele1.wav");
	precache_sound ("misc/r_tele2.wav");
	precache_sound ("misc/r_tele3.wav");
	precache_sound ("misc/r_tele4.wav");
	precache_sound ("misc/r_tele5.wav");
	precache_sound ("weapons/lock4.wav");
	precache_sound ("weapons/pkup.wav");
	precache_sound ("items/armor1.wav");
	precache_sound ("weapons/lhit.wav");
	precache_sound ("weapons/lstart.wav");
	precache_sound ("items/damage3.wav");
	precache_sound ("misc/power.wav");
	precache_sound ("player/gib.wav");
	precache_sound ("player/udeath.wav");
	precache_sound ("player/tornoff2.wav");
	precache_sound ("player/pain1.wav");
	precache_sound ("player/pain2.wav");
	precache_sound ("player/pain3.wav");
	precache_sound ("player/pain4.wav");
	precache_sound ("player/pain5.wav");
	precache_sound ("player/pain6.wav");
	precache_sound ("player/death1.wav");
//	precache_sound ("player/death2.wav");
//	precache_sound ("player/death3.wav");
//	precache_sound ("player/death4.wav");
//	precache_sound ("player/death5.wav");
	precache_sound ("player/malive5.wav");
	precache_sound ("weapons/ax1.wav");
	precache_sound ("player/axhit1.wav");
	precache_sound ("player/axhit2.wav");
	precache_sound ("player/h2ojump.wav");
	precache_sound ("player/slimbrn2.wav");
	precache_sound ("player/inh2o.wav");
	precache_sound ("player/inlava.wav");
	precache_sound ("misc/outwater.wav");
	precache_sound ("player/lburn1.wav");
	precache_sound ("player/lburn2.wav");
	precache_sound ("misc/water1.wav");
	precache_sound ("misc/water2.wav");
#ifdef APRIL_FOOLS
	precache_model ("progs/a1player.mdl");
#endif
	precache_model ("progs/player.mdl");
#ifdef PL_FEM
	precache_model (FEMALE_MODEL_BLUE);
	precache_model (FEMALE_MODEL_RED);
	precache_model (FEMALE_HEAD);
#endif
	precache_model ("progs/eyes.mdl");
	precache_model ("progs/h_player.mdl");
	precache_model ("progs/gib1.mdl");
	precache_model ("progs/gib2.mdl");
	precache_model ("progs/gib3.mdl");
	precache_model ("progs/gib4.mdl");
	if (mapname != "hip2m2" && mapname != "hip1m4")
	{
	precache_model ("progs/s_null.spr");
	precache_model ("progs/chute.mdl");
	}
	precache_model ("progs/s_bubble.spr");
	precache_model ("progs/s_explod.spr");
	precache_model ("progs/v_axe.mdl");
	precache_model (#MODEL_V_SHOTGUN);
	precache_model ("progs/v_nail2.mdl");
	precache_model ("progs/v_rock.mdl");
	precache_model ("progs/v_shot2.mdl");
	precache_model ("progs/v_rock2.mdl");
	precache_model ("progs/grenade.mdl");
	precache_model ("progs/lavaball.mdl");
	precache_model ("progs/missile.mdl");
	precache_model ("progs/spike.mdl");
	precache_model ("progs/backpack.mdl");
	MTF_Priority_Precache();
	if (mapname != "hip2m2" && mapname != "hip1m4")
	{
	precache_model ("progs/zom_gib.mdl");
	}
	precache_model2 ("progs/laser.mdl");
	precache_model2 ("progs/v_medi.mdl");
	precache_model2 ("progs/v_bio.mdl");
	precache_model2 (#MODEL_HGREN2);
	precache_model2 ("progs/biggren.mdl");
	precache_model2 ("progs/flare.mdl");
	precache_model2 ("progs/v_srifle.mdl");
	precache_model2 ("progs/detpack.mdl");
	precache_model2 ("progs/ammobox.mdl");
	precache_model2 ("progs/v_knife.mdl");
	precache_model2 ("progs/v_knife2.mdl");
	precache_model2 ("progs/v_span.mdl");
	precache_model2 ("progs/v_rail.mdl");
	precache_model2 ("progs/turrgun.mdl");
	precache_model2 ("progs/turrbase.mdl");
	precache_model2 ("progs/tgib1.mdl");
	precache_model2 ("progs/tgib2.mdl");
	precache_model2 ("progs/tgib3.mdl");
	precache_model2 ("progs/disp.mdl");
	precache_model2 ("progs/dgib1.mdl");
	precache_model2 ("progs/dgib2.mdl");
	precache_model2 ("progs/dgib3.mdl");
	precache_model2 ("progs/grenade2.mdl");
	precache_model2 ("progs/v_grap.mdl");
	precache_model2 ("progs/hook.mdl");
	precache_sound2 ("speech/saveme1.wav");
//	precache_sound2 ("speech/saveme2.wav");
	precache_sound ("weapons/rifle.wav");
	precache_sound2  ("buttons/switch21.wav");
	precache_sound ("buttons/airbut1.wav");
	precache_sound ("weapons/detpack.wav");
	precache_sound ("weapons/radioair.wav");
	precache_sound ("weapons/notarget.wav");
	precache_sound ("weapons/airstrik.wav");
	precache_sound ("weapons/fighter.wav");
	precache_sound ("weapons/throw.wav");
	precache_sound ("weapons/prime.wav");
	precache_sound ("weapons/20mm.wav");
	precache_sound ("player/step1l.wav");
	precache_sound ("player/step2l.wav");
	precache_sound ("player/step1r.wav");
	precache_sound ("player/step2r.wav");
	precache_sound ("items/repair.wav");
	precache_sound ("misc/medkey.wav");
	precache_sound ("speech/pekaboo.wav");
	precache_sound ("speech/radio/taken.wav");
	precache_sound ("speech/radio/capped.wav");
	precache_sound ("player/gas_mask.wav");
	precache_sound ("items/nightvis.wav");
	precache_sound ("speech/threat.wav");
	precache_sound ("misc/eject.wav");
	precache_sound ("misc/update.wav");
	precache_sound ("misc/startup.wav");
	precache_sound ("misc/enemy.wav");
	precache_sound ("items/health1.wav");
	precache_sound ("player/udeath.wav");
	precache_sound ("player/mpain6.wav");
//	precache_sound ("player/death1.wav");
//	precache_sound ("player/death2.wav");
//	precache_sound ("player/death3.wav");
//	precache_sound ("player/mdeath4.wav"); // BTF 
//	precache_sound ("player/mdeath5.wav");
	precache_sound2 ("enforcer/enfstop.wav");
	precache_sound2 ("enforcer/enfire.wav");
	precache_sound2 ("hknight/attack1.wav");
	precache_model ("progs/incenrkt.mdl");
	precache_model ("progs/lavapool.mdl");
	precache_model ("progs/zom_gib.mdl");
	precache_model2 ("progs/v_bio.mdl");
	precache_model2 (#MODEL_HGREN2);
	precache_model2 ("progs/biggren.mdl");
	precache_model2 ("progs/flare.mdl");
	precache_model ("progs/proxgren.mdl");
	precache_model ("progs/v_asscan.mdl");
	precache_model ("progs/v_mac10.mdl");
	precache_model ("progs/newdot.spr");
//	precache_model ("progs/dot3.spr");	// also used for airstrike. newdot.spr instead.
	precache_model ("progs/rope.mdl");
	precache_model ("progs/dispencr.mdl");
	if (mapname == "r2m6")
{ precache_model ("progs/tf_flag.mdl"); }
	if (Hipnotic_SaveModels2() != 1)
	precache_model ("progs/tf_flag.mdl");
	if (mapname == "r2m4")
		precache_model ("progs/tf_flag.mdl");
#ifdef mega_hats
	precache_model( #HAT_MODEL );
#endif
	precache_sound ("effects/beep.wav");
	precache_sound ("buttons/switch02.wav");
	precache_sound ("player/gib3.wav");
	precache_sound ("player/gib2.wav");
	precache_sound ("weapons/no_ammo.wav");
	precache_sound ("weapons/pkup.wav");
	lightstyle (0.000000, "m");
	lightstyle (1, "mmnmmommommnonmmonqnmmo");
	lightstyle (2, "abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba");
	lightstyle (3, "mmmmmaaaaammmmmaaaaaabcdefgabcdefg");
	lightstyle (4, "mamamamamama");
	lightstyle (5, "jklmnopqrstuvwxyzyxwvutsrqponmlkj");
	lightstyle (6, "nmonqnmomnmomomno");
	lightstyle (7, "mmmaaaabcdefgmmmmaaaammmaamm");
	lightstyle (8, "mmmaaammmaaammmabcdefaaaammmmabcdefmmmaaaa");
	lightstyle (9, "aaaaaaaazzzzzzzz");
	lightstyle (10, "mmamammmmammamamaaamammma");
	lightstyle (11, "abcdefghijklmnopqrrqponmlkjihgfedcba");
	lightstyle (63, "a");
	skill = 2;
	coop = cvar ("coop");
#ifdef botprogs
	bot_debug_lvl = #BOT_DEFAULT_DEBUGLVL;
#endif
#ifdef mtfcoop_uberhardmode
	uberhardmode = stof(infokey(world, "uberhardmode"));
	if (uberhardmode)
		bprint (PRINT_HIGH, "uberhardmode skill on.\n");
#endif
	vw_available = checkextension("ZQ_VWEP");
	if (vw_available)
	{
		precache_vwep_model ("progs/vwplayer.mdl");  // vwep-enabled player model to use
		precache_vwep_model ( "progs/w_axe.mdl");
		precache_vwep_model ( "progs/w_shot.mdl");
		precache_vwep_model ( "progs/w_shot2.mdl");
		precache_vwep_model ( "progs/w_mac10.mdl");
		precache_vwep_model ( "progs/w_nail2.mdl");
		precache_vwep_model ( "progs/w_rockfl.mdl");
		precache_vwep_model ( "progs/w_rock2.mdl");
		precache_vwep_model ( "progs/w_light.mdl");
		precache_vwep_model ( "progs/w_bat.mdl");
		precache_vwep_model ( "progs/w_bio.mdl");	// #10
		precache_vwep_model ( "progs/w_chain.mdl");
		precache_vwep_model ( "progs/w_knife.mdl");
		precache_vwep_model ( "progs/w_knife2.mdl");
		precache_vwep_model ( "progs/w_rail3.mdl");	// 
		precache_vwep_model ( "progs/w_asscan2.mdl");	// #15
		precache_vwep_model ( "progs/w_span.mdl");	// #16
		precache_vwep_model ( "progs/w_proxgren.mdl");	// #17
		precache_vwep_model ( "progs/w_srifle.mdl");	// #18
		precache_vwep_model ( "progs/w_grap.mdl");	// #19
	}
	if (infokey(world,"survival") == "1")
		if (lms_entity == world)
			survival_mode = 2;
	if (infokey(world,"survivalnext") == "1")
		if (lms_entity == world)
		{
			survival_mode = 2;
			localcmd("localinfo survivalnext \"\"\n");
		}
	if (infokey(world,"monstermode") == "1")
		if (lms_entity == world){
			monster_mode = 1;
		}
	if (infokey(world,"monstermodenext") == "1")
		if (lms_entity == world){
			monster_mode = 1;
			localcmd("localinfo monstermodenext \"\"\n");
		}
	if (survival_mode)
		localcmd("localinfo srv_ips \"\"\n");
#ifdef SVEN_COOP
	if (#HL_MAP)
	{
		//cvar_set( "nextmap", "" );
		//cvar_set( "nomaptrans", "" );
		localcmd( "set nextmap \"\"\n" );
		localcmd( "set nomaptrans \"\"\n" );
		
		localcmd( "exec maps/" );
		localcmd( mapname );
		localcmd( ".cfg\n" );
	}
#endif
};
void () StartFrame =
{
#ifdef botprogs
	BotFrame ();
#endif
	teamplay = cvar ("teamplay");
	timelimit = (cvar ("timelimit") * 60);
	fraglimit = cvar ("fraglimit");
	deathmatch = cvar ("deathmatch");
	framecount = (framecount + 1);
};
void () bodyque =
{};
void () InitBodyQue =
{
	bodyque_head = spawn ();
	bodyque_head.classname = "bodyque";
	bodyque_head.owner = spawn ();
	bodyque_head.owner.classname = "bodyque";
	bodyque_head.owner.owner = spawn ();
	bodyque_head.owner.owner.classname = "bodyque";
	bodyque_head.owner.owner.owner = spawn ();
	bodyque_head.owner.owner.owner.classname = "bodyque";
	bodyque_head.owner.owner.owner.owner = bodyque_head;
};
void () GibHead =
{
	ThrowGib ("progs/gib4.mdl", self.health);
	ThrowGib ("progs/gib4.mdl", self.health);
	ThrowGib ("progs/gib4.mdl", self.health);
	ThrowGib ("progs/gib4.mdl", self.health);
	ThrowGib ("progs/gib4.mdl", self.health);
	ThrowGib ("progs/gib4.mdl", self.health);
	setmodel (self, string_null);
	self.solid = 0.000000;
};
void (entity ent) CopyToBodyQue =
{
	bodyque_head.angles = ent.angles;
	bodyque_head.model = ent.model;
	bodyque_head.skin = ent.skin;
	bodyque_head.modelindex = ent.modelindex;
	bodyque_head.frame = ent.frame;
	bodyque_head.colormap = ent.colormap;
	bodyque_head.movetype = ent.movetype;
	if (headkick)
	{
		bodyque_head.solid = ent.solid;
		bodyque_head.touch = ent.touch;
		bodyque_head.takedamage = 2;
		bodyque_head.health = 1;
		bodyque_head.th_die = GibHead;
	}
	bodyque_head.velocity = ent.velocity;
	bodyque_head.flags = 0.000000;
	setorigin (bodyque_head, ent.origin);
	setsize (bodyque_head, ent.mins, ent.maxs);
	bodyque_head = bodyque_head.owner;
};
void() setup_strcat =
{
	if (strcat)	//we already set it up.
		return;
	if (world.targetname == "mvdsv")
	{
		strcat = mvdsv_strcat;
		canusenew = 1;
		return;
	}
	else
	{
		if (cvar("pr_checkextension"))
		{
			if (checkextension("FRIK_FILE") || checkextension("ZQ_QC_STRINGS"))
			{	//note: frik_file includes file access, zquake doesn't, so advertises an alternate extension
				strcat = frik_strcat;			//the string builtins are the same.
				canusenew = 1;
				return;
			}
			if (checkextension("QSG_FILE"))
			{	//included for compleateness.
				strcat = qsg_strcat;
				canusenew = 1;
				return;
			}
		}
	}
	if (infokey(world, "prozacserver") != "1" && infokey(world, "c7server") != "1")
	{
	dprint("Warning: could not detect an strcat builtin, assuming cpqwsv - If this is a server running Often's cpqwsv please set localinfo prozacserver 1\n");
	dprint("Warning: If this is an equake server with vote support or if you dont want to see this message again set localinfo prozacvote 1\n");
	}
	strcat = cpqwsv_strcat;
	if (infokey(world, "prozacserver") == "1" || infokey(world, "c7server") == "1")
	{
	canusenew = 1; }
};
void (string info, float value) flocalinfo_add =
{
	local string tmp;
	localcmd ("localinfo ");
	localcmd (info);
	localcmd (" ");
	if (!value)
	{
		tmp = string_null;
	}
	else
	{
		tmp = ftos (value);
	}
	localcmd ("\"");
	localcmd (tmp);
	localcmd ("\"\n");
};
void (float interv) set_server_time =
{
	server_time = server_time + interv;
	flocalinfo_add ("sv_time", server_time);
};
float (float t) f_uptime_d =
{
	local float d;
	d = t / 86400;
	d = floor (d);
	return (d);
};
float (float t) f_uptime_h =
{
	local float d;
	local float h;
	d = t / 86400;
	d = floor (d);
	h = floor (((t - (d * 86400)) / 3600));
	return (h);
};
float (float t) f_uptime_m =
{
	local float d;
	local float h;
	local float m;
	d = t / 86400;
	d = floor (d);
	h = floor (((t - (d * 86400)) / 3600));
	m = floor ((((t - (d * 86400)) - (h * 3600)) / 60));
	return (m);
};
float (float t) f_uptime_s =
{
	local float d;
	local float h;
	local float m;
	local float s;
	d = t / 86400;
	d = floor (d);
	h = floor (((t - (d * 86400)) / 3600));
	m = floor ((((t - (d * 86400)) - (h * 3600)) / 60));
	s = floor ((((t - (d * 86400)) - (h * 3600)) - (m * 60)));
	return (s);
};
void () uptime_think =
{
	local float t;
	local string s;
	local float i;
	set_server_time (1);
	if ((i == 60))
	{
		i = 0;
	}
	if (!i)
	{
		t = f_uptime_d (server_time);
		localcmd ("serverinfo uptime \"");
		localcmd ("d:");
		s = ftos (t);
		localcmd (s);
		localcmd (" h:");
		t = f_uptime_h (server_time);
		s = ftos (t);
		localcmd (s);
		localcmd (" m:");
		t = f_uptime_m (server_time);
		s = ftos (t);
		localcmd (s);
		localcmd ("\"\n");
	}
	i = i + 1;
	self.nextthink = (time + 1);
};
void () Show_Uptime =
{
	local float t;
	local string s;
	sprint(self, 2, "Server Uptime /n"); // Server Uptime:
	sprint(self, 2, " days: ");		//Days:
	t = f_uptime_d (server_time);
	s = ftos (t);
	sprint(self, 2, s);
	sprint(self, 2, " hours: ");		//Hours:
	t = f_uptime_h (server_time);
	s = ftos (t);
	sprint(self, 2, s);
	sprint(self, 2, " minutes: ");		//Minutes:
	t = f_uptime_m (server_time);
	s = ftos (t);
	sprint(self, 2, s);
	sprint(self, 2, "\n");
	return;
};
//end
