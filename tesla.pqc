void () Tesla_FoundTarget;
void () Tesla_Idle =
{
#ifdef mtf_coop
	if (self.movetype != 5 && self.movetype != MOVETYPE_STEP)
		self.movetype = MOVETYPE_STEP;
		
	tracebox(self.origin, self.mins, self.maxs, self.origin, FALSE, self);
	if (trace_fraction == 0) // we fell out the map. D'OH
	{
		sprint (self.real_owner, 2, "Your sentry gun defied the laws of physics.\n");
		Tesla_Die ();
		return;
	}
#endif
	if (self.waitmax)
	{
		self.waitmax = Tesla_Fire ();
	}
	if ((self.waitmax == 0))
	{
		if (Tesla_FindTarget ())
		{
			self.waitmax = 1;
		}
		else
		{
			self.effects = (self.effects - (self.effects & 8));
			self.nextthink = (time + 0.250000);
		}
	}
	self.think = Tesla_Idle;
};
float /*WARNING: could not determine return type*/ () Tesla_FindTarget =
{
	local entity t_client;
	local entity te;
	local float r;
	local float gotone;
	local float loopc;
#ifdef mtf_coop
	local entity head;
#endif
	if ((self.tf_items & 2))
	{
		self.origin_z = (self.origin_z - 40);
	}
	else
	{
		self.origin_z = (self.origin_z + 24);
	}
	r = 0;
	loopc = 0;
	gotone = 0;
	while (((loopc < 8) && (gotone == 0)))
	{
		t_client = checkclient ();
		te = find (world, classname, "bot");
		if (te)
		{
			if (te.health)
			{
				if (visible (te))
				{
					t_client = te;
				}
			}
		}
		gotone = 1;
		if (!t_client)
		{
			gotone = 0;
		}
		if (t_client.bugger == 8)
		{
			gotone = 0;
		}
		if ((t_client.playerclass == 0))
		{
			gotone = 0;
		}
		if ((t_client.health <= 0))
		{
			gotone = 0;
		}
		if (t_client.has_disconnected)
		{
			gotone = 0;
		}
		if (teamplay)
		{
			if (((t_client.team_no == self.team_no) && (self.team_no != 0)))
			{
				gotone = 0;
			}
			if (((t_client.undercover_team == self.team_no) && (self.team_no != 0)))
			{
				if (!(self.tf_items & 1024))
				{
					gotone = 0;
				}
			}
		}
		if ((t_client == self.real_owner))
		{
			gotone = 0;
		}
		if (t_client.is_feigning)
		{
			if (!(self.tf_items & 1024))
			{
				gotone = 0;
			}
		}
		if ((t_client.flags & 128))
		{
			gotone = 0;
		}
		if ((t_client.items & 524288))
		{
			gotone = 0;
		}
		if (!visible (t_client))
		{
			gotone = 0;
		}
		r = vlen ((t_client.origin - self.origin));
		if (((self.ammo_shells == 0) && (r > 400)))
		{
			gotone = 0;
		}
		if (((self.ammo_shells == 1) && (r > 800)))
		{
			gotone = 0;
		}
		if (((self.ammo_shells == 2) && (r > 1200)))
		{
			gotone = 0;
		}
		if (((self.ammo_shells == 3) && (r > 1600)))
		{
			gotone = 0;
		}
		loopc = loopc + 1;
		if (gotone)
		{
			loopc = 1000;
		}
	}
	if ((self.tf_items & 2))
	{
		self.origin_z = (self.origin_z + 40);
	}
	else
	{
		self.origin_z = (self.origin_z - 24);
	}
	if (!gotone)
	{
#ifdef mtf_coop
		head = findradius(self.origin, 3000);
		while (head)
		{
			if (head.health > 0 && head.is_monster == 1)
			{
				if (head.team_no != self.team_no && head.team_no > 0) {
					if (visible (head))
					{
						t_client = head;
						gotone = 1;
					}
				}
			}
			head = head.chain;
		}
		if (!gotone)
#endif
		return (0);
	}
	if ((self.enemy == t_client))
	{
		return (Tesla_Fire ());
	}
	self.enemy = t_client;
#ifdef mtf_coop
	if (((self.enemy.is_monster != 1) && (self.enemy.classname != "player") && (self.enemy.classname != "bot")))
#else
	if (((self.enemy.classname != "player") && (self.enemy.classname != "bot")))
#endif
	{
		self.enemy = self.enemy.enemy;
#ifdef mtf_bot
		if (((self.enemy.is_monster != 1) && (self.enemy.classname != "player") && (self.enemy.classname != "bot")))
#else
		if (((self.enemy.classname != "player") && (self.enemy.classname != "bot")))
#endif
		{
			self.enemy = world;
			return (0);
		}
	}
	Tesla_FoundTarget ();
	return (1);
};
void () Tesla_FoundTarget =
{
	if ((self.ammo_cells > self.waitmin))
	{
		sound (self, 2, "weapons/guerilla_set.wav", 1, 1);
	}
#ifdef mtf_coop
	if (self.tf_items & 1)
		if (self.ammo_cells > (self.waitmin*2))
		{
			sound (self, 2, "weapons/guerilla_set.wav", 1, 1);
		}
#endif
	self.effects = (self.effects | 8);
	self.goalentity = self.enemy;
	local float tesladelay;
	if (self.ammo_nails == 0) //Initial delay based on AMPS
		tesladelay = 0.5;
	else if (self.ammo_nails == 1) //So its not as fast,  but still fast
		tesladelay = 0.75;
	else if (self.ammo_nails == 2)
		tesladelay = 1;
	else
		tesladelay = 1.5;
	if (self.enemy.velocity_z > 425 ||  self.enemy.velocity_y > 425 || self.enemy.velocity_x > 425)
		tesladelay = tesladelay + 1.5;
	self.nextthink = time + tesladelay;
	if ((self.enemy.modelindex == modelindex_null))
	{
		self.nextthink = (self.nextthink + 2);
	}
	else
	{
		if ((self.enemy.modelindex == modelindex_eyes))
		{
			self.nextthink = (self.nextthink + 1);
		}
	}
	if ((self.tf_items & 1))
	{
		self.nextthink = (time + 0.500000);
	}
};
void () Tesla_Pain =
{
	self.real_owner.StatusRefreshTime = (time + 0.200000);
};
void () Tesla_Die =
{
	sprint (self.real_owner, 2, "Your tesla coil was destroyed.\n");
	self.real_owner.has_tesla = 0;
	self.real_owner.has_turretized_tesla = 0;
	ThrowGib ("progs/tgib1.mdl", -70);
	ThrowGib ("progs/tgib2.mdl", -70);
	ThrowGib ("progs/tgib3.mdl", -70);
	WriteByte (4, 23);
	WriteByte (4, 3);
	WriteCoord (4, self.origin_x);
	WriteCoord (4, self.origin_y);
	WriteCoord (4, self.origin_z);
	multicast (self.origin, 1);
	BecomeExplosion ();
};
float /*WARNING: could not determine return type*/ () Tesla_Fire =
{
	local vector dir;
	local float damage;

	dir = self.enemy.origin - self.origin;
	if ((self.enemy.classname == "bot"))
	{
		dir = (self.enemy.origin + '0.000000 0.000000 -35.000000') - self.origin;
	}
	if (!self.enemy)
	{
		return (0);
	}
#ifdef mtf_coop
	if (!(self.flags & FL_ONGROUND))
	{
		if (!self.autoid) {
			sprint(self.real_owner, 2, "Tesla fires with less power without a ground source.\n");
			self.autoid = 1;
		}
	}
	if (self.enemy.classname == "player" || self.enemy.classname == "bot")
	{
#endif
	if ((self.enemy == world))
	{
		return (0);
	}
	if (self.enemy.has_disconnected)
	{
		self.enemy = world;
		return (0);
	}
	if (self.enemy.is_feigning)
	{
		if (!(self.tf_items & 1024))
		{
			return (0);
		}
	}
#ifdef mtf_coop
	}
	if (self.enemy.monster_items & MITEM_INVISIBLE) {
		if (!(self.tf_items & 1024))
		{
			return (0);
		}
	}
#endif
	if ((self.tf_items & 2))
	{
		self.origin_z = (self.origin_z - 40);
	}
	else
	{
		self.origin_z = (self.origin_z + 24);
	}
	if (!visible (self.enemy)  || self.enemy.bugger == 8)
	{
		if ((self.tf_items & 2))
		{
			self.origin_z = (self.origin_z + 40);
		}
		else
		{
			self.origin_z = (self.origin_z - 24);
		}
		return (0);
	}
	self.ammo_cells = (self.ammo_cells - self.waitmin);
#ifdef mtf_coop
	if (self.tf_items & 1)
		self.ammo_cells = (self.ammo_cells - self.waitmin);	// do this a second time
		
	if (!(self.flags & FL_ONGROUND)) {
		self.ammo_cells = (self.ammo_cells - self.waitmin);	// do this another time
	}
#endif
	if ((self.ammo_cells < 0))
	{
		self.ammo_cells = 0;
		if ((self.tf_items & 2))
		{
			self.origin_z = (self.origin_z + 40);
		}
		else
		{
			self.origin_z = (self.origin_z - 24);
		}
		self.enemy = world;
		return (0);
	}
	self.effects = (self.effects | 8);
	deathmsg = 51;
	WriteByte (4, 23);
	WriteByte (4, 6);
	WriteEntity (4, self);
	WriteCoord (4, self.origin_x);
	WriteCoord (4, self.origin_y);
	WriteCoord (4, (self.origin_z + 24));
	WriteCoord (4, self.enemy.origin_x);
	WriteCoord (4, self.enemy.origin_y);
	WriteCoord (4, self.enemy.origin_z);
	multicast (self.origin, 1);
#ifdef mtf_coop
	sound (self, 1, "enforcer/enfire.wav", 1, 1);
#else
	sound (self, 1, "weapons/tesla.wav", 1, 1);
#endif
	if ((self.ammo_nails == 0))
	{
		damage = 40;
	}
	if ((self.ammo_nails == 1))
	{
		damage = 85;
	}
	if ((self.ammo_nails == 2))
	{
		damage = 150;
	}
	if ((self.ammo_nails == 3))
	{
		damage = 250;
	}
#ifdef mtf_coop
	if ((self.ammo_nails == 1))
	{
		damage = 75;
	}
	if ((self.ammo_nails == 2))
	{
		damage = 120;
	}
	if ((self.ammo_nails == 3))
	{
		damage = 165;
	}
	if (self.real_owner.super_damage_finished > time)
		damage *= .25;
		
	if (self.enemy.monster_items & MITEM_AIR || self.enemy.monster_items & MITEM_LIGHTNING || self.enemy.monster_items & MITEM_FLAME)
		damage *= .1;
	
	if (!(self.flags & FL_ONGROUND)) 
		damage *= .55;
#endif
	TF_T_Damage (self.enemy, self, self.real_owner, damage, 2, 8);
	if ((self.ammo_nails <= 1))
	{
		self.nextthink = (time + 1.500000);
	}
	else
	{
		if ((self.ammo_nails == 2))
		{
			self.nextthink = (time + 1);
		}
		else
		{
			self.nextthink = (time + 2);
		}
	}
	if (((self.ammo_cells == 0) && (random () < 0.100000)))
	{
		sprint (self.real_owner, 2, "Tesla is out of cells.\n");
	}
	else
	{
#ifdef mtf_coop
		if (self.tf_items & 1 && self.ammo_cells <= (self.waitmin*2))
		{
			sprint (self.real_owner, 2, "Tesla is low on cells.\n");
		}
		else
#endif
		if ((self.ammo_cells <= self.waitmin))
		{
			sprint (self.real_owner, 2, "Tesla is low on cells.\n");
		}
	}
	if ((self.tf_items & 2))
	{
		self.origin_z = (self.origin_z + 40);
	}
	else
	{
		self.origin_z = (self.origin_z - 24);
	}
	if ((self.enemy.health <= 0))
	{
		self.enemy = world;
		return (0);
	}
	return (1);
};
void () Tesla_Touch =
{
	local float damage;
#ifdef mtf_coop
	if ((self.ammo_nails == 0))
	{
		damage = 40;
	}
	if ((self.ammo_nails == 1))
	{
		damage = 85;
	}
	if ((self.ammo_nails == 2))
	{
		damage = 150;
	}
	if ((self.ammo_nails == 3))
	{
		damage = 250;
	}
	if (self.real_owner.super_damage_finished > time)
		damage *= .25;
#else
	damage = 400;
#endif
	if ((pointcontents (self.origin) == -6))
	{
		sprint (self.real_owner, 2, "Your sentry gun flew away.\n");
		Tesla_Die ();
		return;
	}
	if ((other.takedamage && !(self.tf_items & 2)))
	{
		deathmsg = 52;
		if ((((other.team_no > 0) && (other.team_no != self.real_owner.team_no)) && (other.is_undercover != 1)))
		{
			TF_T_Damage (other, self, self.real_owner, damage, 2, 8);
		}
		return;
	}
	if (((self.tf_items & 2) && (self.movetype == 5)))
	{
		if (((((((((pointcontents (self.origin) == -6) || (pointcontents ((self.origin - '0.000000 0.000000 10.000000')) == -6)) || (pointcontents ((self.origin + '0.000000 0.000000 5.000000')) == -6)) || (pointcontents ((self.origin + '0.000000 0.000000 10.000000')) == -6)) || (pointcontents ((self.origin + '0.000000 0.000000 15.000000')) == -6)) || (pointcontents ((self.origin + '0.000000 0.000000 20.000000')) == -6)) || (pointcontents ((self.origin + '0.000000 0.000000 30.000000')) == -6)) || (pointcontents ((self.origin + '0.000000 0.000000 40.000000')) == -6)))
		{
			sprint (self.real_owner, 2, "Your sentry gun flew away.\n");
			Tesla_Die ();
			return;
		}
		if ((other == world))
		{
			self.flags = (self.flags | 512);
			self.movetype = 4;
			//self.origin_z = (self.origin_z + 40);
			self.origin_z = (self.origin_z + 16);
			return;
		}
		else
		{
			if ((other.classname == "player"))
			{
				deathmsg = 52;
				TF_T_Damage (other, self, self.real_owner, damage, 2, 8);
			}
		}
		Tesla_Die ();
	}
};
//END
